package map;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import map.tiles.Tile;
import map.tiles.TileType;

import org.jdom2.Element;
import org.jdom2.filter.ElementFilter;
import org.jdom2.input.SAXBuilder;

public class XMLParser {
	
	private org.jdom2.Document document;
	private Element racine;
	
	/* Constructeur */

	public XMLParser(String filename) {
		// TODO Auto-generated constructor stub
		super();
		String workingDir = System.getProperty("user.dir");
		String finalfile = workingDir + File.separator + "data" + File.separator + filename;
		
		//On crée une instance de SAXBuilder
		SAXBuilder sxb = new SAXBuilder();
		try
		{
			//On crée un nouveau document JDOM avec en argument le fichier XML
			document = sxb.build(new File(finalfile));
		}
		catch(Exception e){e.printStackTrace();}
		finally
		{
			//On initialise un nouvel élément racine avec l'élément racine du document.
			racine = document.getRootElement();
		}
	}
	
	/* Données de la map */
	
	public String getMapName ()
	{
	   return racine.getAttributeValue("name");
	}
	
	public int getMapWidth ()
	{
		return Integer.parseInt(racine.getAttributeValue("width"));
	}
	
	public int getMapHeight ()
	{
		return Integer.parseInt(racine.getAttributeValue("height"));
	}
	
	/* Données de tiles */
	
	public ArrayList<ArrayList<Tile>> getMapTiles ()
	{
		// Initialisation de tilesTable
		
		ArrayList<ArrayList<Tile>> tilesTable = new ArrayList<ArrayList<Tile>>();
		
		int i = 0, j = 0;
		for (i = 0; i < getMapWidth(); ++i)
		{
			ArrayList<Tile> newLine = new ArrayList<Tile>();
			for (j = 0; j < getMapHeight(); ++j)
			{
				newLine.add(new Tile (TileType.Field));
			}
			tilesTable.add(newLine);
		}
		
		Iterator<Element> it = (Iterator<Element>) racine.getDescendants(new ElementFilter ("tile"));
		Zone zone = null;
		while (it.hasNext())
		{
			Element current = it.next();
			Tile tile = new Tile (TileType.Field);
			
			Element currentParent = current.getParentElement();
			if (currentParent.getName() == "zone")
			{
				// Si la zone n'existe pas encore, on la crée
				if (zone == null)
				{
					zone = new Zone (Integer.parseInt(currentParent.getAttributeValue("id")));
				}
				tile.setZone(zone);
				currentParent = currentParent.getParentElement();
			}
			else
			{
				tile.setZone (null);
			}
			switch (currentParent.getName())
			{
				case "buttress" :
				{
					tile.setType(TileType.Buttress);
					break;
				}
				case "mountain" :
				{
					tile.setType(TileType.Mountain);
					break;
				}
				default :
				{
					tile.setType(TileType.Field);
					break;
				}
			}
			
			int line = Integer.parseInt(current.getAttributeValue("x"));
			int column = Integer.parseInt(current.getAttributeValue("y"));
			
			System.out.println(tile.getType());
			System.out.println(tile.getZone().getId());
			
			tilesTable.get(line).set(column, tile);
		}
		return tilesTable;
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		XMLParser parser = new XMLParser ("map1.xml");
		System.out.println(parser.getMapName());
	}

}
